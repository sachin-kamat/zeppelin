{"paragraphs":[{"text":"%md\n# About This Lab\n**Objective:** This module illustrates the performance benefits of doing partition processing\n**File locations:** /spark-perf/retail\n**Successful outcome:**\n**Before you begin:**\n**Related lessons:** Partition Processing\n\nCopyright © 2010–2020 Cloudera. All rights reserved.\nNot to be reproduced or shared without prior written consent from Cloudera.\n\n---","user":"anonymous","dateUpdated":"2020-08-20 09:02:34.731","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823874_-1008363730","id":"20171105-200834_1116095891","dateCreated":"2020-08-20 06:40:23.874","dateStarted":"2020-08-21 23:04:32.298","dateFinished":"2020-08-21 23:04:32.299","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n## Overview\n\nThe Spark execution model is defined as a series of transformations on collections, followed by an action.\nNarrow transformations transform individual elements of an RDD/DataFrame.  Wide transformations operate on subsets of the elements.\n\nThe Spark framework usually controls when, where and how the transformations are applied. \nThe Spark developer simply provides the transformations.\n\nSometimes the Spark developer needs to hook into the Spark partition processing.","user":"anonymous","dateUpdated":"2020-08-20 09:02:34.901","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823877_58776578","id":"20200725-232357_2005906304","dateCreated":"2020-08-20 06:40:23.877","dateStarted":"2020-08-21 23:04:32.402","dateFinished":"2020-08-21 23:04:32.403","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n# Setup\n---","user":"anonymous","dateUpdated":"2020-08-20 09:02:35.052","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823878_-1651465722","id":"20181114-164229_902436001","dateCreated":"2020-08-20 06:40:23.878","dateStarted":"2020-08-21 23:04:32.505","dateFinished":"2020-08-21 23:04:32.506","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Environment variable required to use SetJobGroup","text":"%sh\n\nPYSPARK_PIN_THREAD=true","user":"anonymous","dateUpdated":"2020-08-20 09:02:35.202","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823878_-1533812090","id":"20200727-014038_443653381","dateCreated":"2020-08-20 06:40:23.878","dateStarted":"2020-08-21 23:04:32.607","dateFinished":"2020-08-21 23:04:32.615","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Libraries used in this module","text":"%pyspark\n\nfrom pyspark.sql.functions import udf,col,to_date,lit\nfrom pyspark.sql.types import IntegerType\n#import time","user":"anonymous","dateUpdated":"2020-08-20 09:02:35.352","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823879_848438210","id":"20200725-233036_203835286","dateCreated":"2020-08-20 06:40:23.879","dateStarted":"2020-08-21 23:04:32.712","dateFinished":"2020-08-21 23:05:18.869","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":" HDFS File directories used in this module","text":"%pyspark\n\nretail_dir = \"/spark-perf/retail\"\nsales_untaxed_dir = retail_dir+\"/clean/sales_untaxed\"","user":"anonymous","dateUpdated":"2020-08-20 09:02:36.504","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823879_-56263065","id":"20200725-232949_284547173","dateCreated":"2020-08-20 06:40:23.879","dateStarted":"2020-08-21 23:05:18.895","dateFinished":"2020-08-21 23:05:19.911","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Retrieve the Spark context","text":"%pyspark\n\nsc = spark.sparkContext","user":"anonymous","dateUpdated":"2020-08-20 09:02:37.653","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823879_1171963646","id":"20200725-232349_1842723653","dateCreated":"2020-08-20 06:40:23.879","dateStarted":"2020-08-21 23:05:20.010","dateFinished":"2020-08-21 23:05:21.027","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n\nThis a simple minded fake tax service used in the partition processing demo.  \nIt simply returns a 10% tax of the price.  It calculates that locally but \nit does make a do-nothing web service call to simulate the performance overhead.","user":"anonymous","dateUpdated":"2020-08-20 09:02:38.811","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823880_-962302218","id":"20200725-235507_353370633","dateCreated":"2020-08-20 06:40:23.880","dateStarted":"2020-08-21 23:05:21.117","dateFinished":"2020-08-21 23:05:21.118","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Define the TaxService class","text":"%pyspark\n\nfrom pyspark.sql import Row\nimport time\n\nclass TaxService:\n    def calculate_sales_tax(self,postalcode,price): \n      # Sleep for 10ms to simulate call\n      time.sleep(.01)\n      return int(round(price * .1))\n    \n    def calculate_sales_tax_batch(self,sales):\n      # Sleep for 10ms to simulate call\n      time.sleep(.01)\n      result = []\n      for sale in sales:\n        dict = sale.asDict()\n        dict[\"sales_tax\"] = int(round(sale.price * .1))\n        result.append(Row(**dict))\n      return result","user":"anonymous","dateUpdated":"2020-08-20 09:02:38.962","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823880_-1263731734","id":"20200725-235440_2065781586","dateCreated":"2020-08-20 06:40:23.880","dateStarted":"2020-08-21 23:05:21.219","dateFinished":"2020-08-21 23:05:22.232","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Create a Hive tavle to store our weblogs","text":"%sql\n\nCREATE EXTERNAL TABLE IF NOT EXISTS sparkperf.weblogs (\n  ip_address STRING,\n  client_id INT,\n  date_time STRING,\n  request STRING,\n  status INT,\n  bytes INT,\n  referer STRING,\n  user_agent STRING\n)\nROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.RegexSerDe'\n  WITH SERDEPROPERTIES (\n  \"input.regex\" = \"^([\\\\d.]+) \\\\S+ (\\\\d+) \\\\[(.+?)\\\\] \\\"(.+?)\\\" (\\\\d{3}) (\\\\d+) \\\"(.+?)\\\"\\\\se* \\\"(.+?)\\\".*$\"\n  )\nLOCATION '/spark-perf/ecommerce/weblogs/raw'","user":"anonymous","dateUpdated":"2020-08-20 09:02:40.113","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{}},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823880_210633678","id":"20200726-004020_842858079","dateCreated":"2020-08-20 06:40:23.880","dateStarted":"2020-08-21 23:05:22.332","dateFinished":"2020-08-21 23:05:27.439","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n# Demo\n---","user":"anonymous","dateUpdated":"2020-08-20 09:02:41.264","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823881_552346808","id":"20181114-164844_1661453681","dateCreated":"2020-08-20 06:40:23.881","dateStarted":"2020-08-21 23:05:27.489","dateFinished":"2020-08-21 23:05:27.491","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n\n## Scenario","user":"anonymous","dateUpdated":"2020-08-20 09:02:41.415","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823881_1582984821","id":"20200725-233919_2064043796","dateCreated":"2020-08-20 06:40:23.881","dateStarted":"2020-08-21 23:05:27.592","dateFinished":"2020-08-21 23:05:27.593","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"The module uses sales data that does not include a calculated tax","text":"%pyspark\n\nsc.setJobGroup(\"Partition processing\",\"Load the untaxed sales data\")\nsales_untaxed = spark.read.parquet(sales_untaxed_dir).repartition(5)\nsales_untaxed.printSchema()\nsc.setJobGroup(\"Partition processing\",\"Inspect the untaxed sales data\")\nsales_untaxed.limit(5).show()\nsc.setJobGroup(\"Partition processing\",\"Count the untaxed sales data\")\nsales_untaxed.count()\nsales_untaxed.rdd.getNumPartitions()","user":"anonymous","dateUpdated":"2020-08-20 09:02:41.563","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823881_-45091115","id":"20200725-233956_217501228","dateCreated":"2020-08-20 06:40:23.881","dateStarted":"2020-08-21 23:05:27.694","dateFinished":"2020-08-21 23:05:38.745","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n\nTax calculation can be complicated. \nIt may depend on the location of the sale, the date of the sale and the type of product.\n\nRather than embedding that logic in every application, a better approach is to access a *service* that can calculate the tax. \nAccessing a service is fairly expensive when it involves network communication.\n\nWe have created a simple minded fake tax service for this demo. \nIt simply returns a 10% tax of the price. \nIt calculates that locally but sleeps for 10ms for each service call to simulate the performance overhead.","user":"anonymous","dateUpdated":"2020-08-20 09:02:48.722","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823882_1544104872","id":"20200725-234836_1615878282","dateCreated":"2020-08-20 06:40:23.882","dateStarted":"2020-08-21 23:05:38.800","dateFinished":"2020-08-21 23:05:38.802","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Let's call the fake TaxService on a single sale","text":"%pyspark\n\nsc.setJobGroup(\"Partition processing\",\"Inspect first sale\")\nsale = sales_untaxed.take(1)[0]\nsale\n\nTaxService().calculate_sales_tax(sale.postalcode,sale.price)","user":"anonymous","dateUpdated":"2020-08-20 09:02:48.884","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823882_-1830256813","id":"20200725-235051_7357649","dateCreated":"2020-08-20 06:40:23.882","dateStarted":"2020-08-21 23:05:38.903","dateFinished":"2020-08-21 23:05:42.925","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n\nHow can we add a new ``sales_tax`` column to the sales_untaxed DataFrame?","user":"anonymous","dateUpdated":"2020-08-20 09:02:55.068","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823883_-140629276","id":"20200725-235925_406166607","dateCreated":"2020-08-20 06:40:23.883","dateStarted":"2020-08-21 23:05:42.928","dateFinished":"2020-08-21 23:05:42.930","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Ultimately, we'd like our sales data to look like this","text":"%pyspark\n\ntaxed_sales = sales_untaxed.withColumn(\"sales_tax\",lit(0))\ntaxed_sales.printSchema()","user":"anonymous","dateUpdated":"2020-08-20 09:02:55.224","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823883_643749875","id":"20200725-235918_1157762081","dateCreated":"2020-08-20 06:40:23.883","dateStarted":"2020-08-21 23:05:43.030","dateFinished":"2020-08-21 23:05:44.042","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n\n## Problematic approach - call service from a UDF\n\nWe can't even demo this problematic approach on all 3 million + rows.  We'll limit ourselves to a sample","user":"anonymous","dateUpdated":"2020-08-20 09:02:56.379","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823883_702721141","id":"20200726-000115_1858180386","dateCreated":"2020-08-20 06:40:23.883","dateStarted":"2020-08-21 23:05:44.138","dateFinished":"2020-08-21 23:05:44.140","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Illustrate this problematic approach on a sample","text":"%pyspark\n\nsc.setJobGroup(\"Partition processing\",\"Illustrate this problematic approach on a sample\")\nsales_untaxed.limit(10000).write.parquet(\"spark-perf/sales_sample\",mode=\"overwrite\")","user":"anonymous","dateUpdated":"2020-08-20 09:02:56.530","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823884_1647894077","id":"20200726-000232_2031976059","dateCreated":"2020-08-20 06:40:23.884","dateStarted":"2020-08-21 23:05:44.240","dateFinished":"2020-08-21 23:05:49.263","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Get the number of partitions of the sample results","text":"%pyspark\n\nsc.setJobGroup(\"Partition processing\",\"Get the number of partitions of the sample results\")\nsales_sample = spark.read.parquet(\"spark-perf/sales_sample\")\n\nsales_sample.rdd.getNumPartitions()","user":"anonymous","dateUpdated":"2020-08-20 09:03:03.686","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823884_-401243638","id":"20200726-000314_859154436","dateCreated":"2020-08-20 06:40:23.884","dateStarted":"2020-08-21 23:05:49.285","dateFinished":"2020-08-21 23:05:50.295","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Calculate the tax with a custom UDF","text":"%pyspark\n\ndef sales_tax(postalcode,price):\n  return TaxService().calculate_sales_tax(postalcode,price)\n\nsales_tax_udf = udf(sales_tax, returnType=IntegerType())\n\nsales_with_tax_by_udf = sales_sample.withColumn(\"sales_tax\" ,sales_tax_udf(\"postalcode\",\"price\"))\n\nsc.setJobGroup(\"Partition processing\",\"Calculate the tax with a custom UDF\")\nsales_with_tax_by_udf.write.csv(\"spark-perf/sales_with_tax_udf\",mode=\"overwrite\")","user":"anonymous","dateUpdated":"2020-08-20 09:03:04.848","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823884_703114043","id":"20200726-000310_1264271436","dateCreated":"2020-08-20 06:40:23.884","dateStarted":"2020-08-21 23:05:50.302","dateFinished":"2020-08-21 23:07:36.645","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n\n## A better approach -- ``mapPartitions``\n\nThe tax service will calculate a batch of sales.\nLet's try it locally.","user":"anonymous","dateUpdated":"2020-08-20 09:04:47.335","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823885_358902796","id":"20200726-000919_89165629","dateCreated":"2020-08-20 06:40:23.885","dateStarted":"2020-08-21 23:07:36.711","dateFinished":"2020-08-21 23:07:36.712","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Inspect our sales sample","text":"%pyspark\n\nsc.setJobGroup(\"Partition processing\",\"Inspect our sales sample\")\nbatch = sales_sample.take(5)","user":"anonymous","dateUpdated":"2020-08-20 09:04:47.596","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823885_1785926670","id":"20200726-000912_1611703202","dateCreated":"2020-08-20 06:40:23.885","dateStarted":"2020-08-21 23:07:36.812","dateFinished":"2020-08-21 23:07:37.824","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Calculate the tax on our sample","text":"%pyspark\n\nsc.setJobGroup(\"Partition processing\",\"Calculate the tax on our sample\")\nTaxService().calculate_sales_tax_batch(batch)","user":"anonymous","dateUpdated":"2020-08-20 09:04:48.782","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823885_-1551048397","id":"20200726-001046_119018613","dateCreated":"2020-08-20 06:40:23.885","dateStarted":"2020-08-21 23:07:37.830","dateFinished":"2020-08-21 23:07:38.842","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n\nSo rather than call the service for each element, we will call it once per partition.","user":"anonymous","dateUpdated":"2020-08-20 09:04:49.939","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823886_909784569","id":"20200726-001312_659751878","dateCreated":"2020-08-20 06:40:23.886","dateStarted":"2020-08-21 23:07:38.944","dateFinished":"2020-08-21 23:07:38.945","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Clean up previous results","text":"%sh\n\nhdfs dfs -rm -f -r -skipTrash /user/livy/spark-perf/sales_with_tax_part","user":"anonymous","dateUpdated":"2020-08-20 09:04:50.086","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823886_1446976398","id":"20200726-001415_1627981324","dateCreated":"2020-08-20 06:40:23.886","dateStarted":"2020-08-21 23:07:39.047","dateFinished":"2020-08-21 23:07:40.953","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Use mapPartition to calculate the tax","text":"%pyspark\n\ndef addTaxes(iter):\n  return TaxService().calculate_sales_tax_batch(list(iter))\n\nsales_with_tax_rdd = sales_sample.rdd.mapPartitions(addTaxes)\n\nsc.setJobGroup(\"Partition processing\",\"Use mapPartition to calculate the tax\")\nsales_with_tax_rdd.saveAsTextFile(\"spark-perf/sales_with_tax_part\")","user":"anonymous","dateUpdated":"2020-08-20 09:04:52.445","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823886_-563572751","id":"20200726-001349_722445287","dateCreated":"2020-08-20 06:40:23.886","dateStarted":"2020-08-21 23:07:40.960","dateFinished":"2020-08-21 23:07:41.972","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Clean up","text":"%sh\n\nhdfs dfs -rm -f -r -skipTrash /user/livy/spark-perf/sales_with_tax_part","user":"anonymous","dateUpdated":"2020-08-20 09:04:53.595","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823887_-395431365","id":"20200726-001730_1289995941","dateCreated":"2020-08-20 06:40:23.887","dateStarted":"2020-08-21 23:07:42.067","dateFinished":"2020-08-21 23:07:44.002","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n# Lab\n---","user":"anonymous","dateUpdated":"2020-08-20 09:04:55.962","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823887_693778977","id":"20200605-110208_60696362","dateCreated":"2020-08-20 06:40:23.887","dateStarted":"2020-08-21 23:07:44.082","dateFinished":"2020-08-21 23:07:44.083","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n\n## Count number of requests per day\n\n* In this exercise you will compare two approaches to counting the number of requests per day.\n  This code reads and adds a ``day`` column to the weblog data. \n  You will use this ``weblogs_with_day`` DataFrame for this exercise.","user":"anonymous","dateUpdated":"2020-08-20 09:04:56.125","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823887_-2144221507","id":"20200726-001828_784714487","dateCreated":"2020-08-20 06:40:23.887","dateStarted":"2020-08-21 23:07:44.185","dateFinished":"2020-08-21 23:07:44.186","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%pyspark\n\nweblogs = spark.read.table(\"sparkperf.weblogs\")\nweblogs_with_day = weblogs.withColumn(\"day\",to_date(col(\"date_time\"),\"dd/MMM/yyyy\"))\nweblogs_with_day.printSchema()\nweblogs_with_day.rdd.getNumPartitions()","user":"anonymous","dateUpdated":"2020-08-20 09:04:56.292","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823888_37060099","id":"20200726-002638_1904673135","dateCreated":"2020-08-20 06:40:23.888","dateStarted":"2020-08-21 23:07:44.288","dateFinished":"2020-08-21 23:07:45.300","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n\n* The web logs are ingested daily.  They are already partitioned by day. \n  Use that fact and ``mapPartitions`` to calculate the number of requests per day. \n  Print out the first 10 days.\n\n* Use ``groupby`` on the DataFrame and count the group. \n  Print out the first 10 days.\n\n* Compare the performance of the two approaches.","user":"anonymous","dateUpdated":"2020-08-20 09:04:57.441","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823888_-599689995","id":"20200726-002633_1553047930","dateCreated":"2020-08-20 06:40:23.888","dateStarted":"2020-08-21 23:07:45.399","dateFinished":"2020-08-21 23:07:45.400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"1 - Using mapPartitions","text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-08-20 09:04:57.597","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823889_1523051710","id":"20200726-004445_1580955938","dateCreated":"2020-08-20 06:40:23.889","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"2 - Using GroupBy","text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-08-20 09:04:57.647","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823889_-2047202489","id":"20200726-004459_1616753206","dateCreated":"2020-08-20 06:40:23.889","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n\n## Use ```foreachPartition``` to print the counts\n\n*   The ```foreachPartition``` method supports performing an action on each partition.\n Use it to print the counts of each partition.","user":"anonymous","dateUpdated":"2020-08-20 09:04:57.694","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823889_505063619","id":"20200726-001833_265034082","dateCreated":"2020-08-20 06:40:23.889","dateStarted":"2020-08-21 23:07:45.501","dateFinished":"2020-08-21 23:07:45.502","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"3 - Print the partitions","text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-08-20 09:04:57.851","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823890_801029324","id":"20200726-005032_413166746","dateCreated":"2020-08-20 06:40:23.890","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n# Result\n**You have now:** created something\n\n---","user":"anonymous","dateUpdated":"2020-08-20 09:04:57.896","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823890_-323625453","id":"20181119-142716_792318228","dateCreated":"2020-08-20 06:40:23.890","dateStarted":"2020-08-21 23:07:45.603","dateFinished":"2020-08-21 23:07:45.604","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n# Solution\n---","user":"anonymous","dateUpdated":"2020-08-20 09:04:58.047","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823890_833679218","id":"20171113-155535_1769142099","dateCreated":"2020-08-20 06:40:23.890","dateStarted":"2020-08-21 23:07:45.706","dateFinished":"2020-08-21 23:07:45.707","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"1 - Using mapPartitions","text":"%pyspark\n\ndef getCount(iter):\n  i=0\n  for row in iter: i=i+1\n  yield (row.day,i)\n\nsc.setJobGroup(\"Partition processing\",\"Count of weblogs per day using a mapPartitions\")\nweblogs_by_mp = weblogs_with_day.rdd.mapPartitions(getCount)\nweblogs_by_mp.take(10)","user":"anonymous","dateUpdated":"2020-08-20 09:04:58.200","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823891_-1860373872","id":"20200726-004556_748710498","dateCreated":"2020-08-20 06:40:23.891","dateStarted":"2020-08-21 23:07:45.808","dateFinished":"2020-08-21 23:07:47.822","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"2 - Using GroupBy","text":"%pyspark\n\nsc.setJobGroup(\"Partition processing\",\"Count of weblogs per day using a groupby\")\nweblogs_by_groupby = weblogs_with_day.groupby(\"day\").count().sort(\"day\")\nweblogs_by_groupby.show(10)","user":"anonymous","dateUpdated":"2020-08-20 09:05:01.355","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823891_-1937259126","id":"20200726-004634_770158509","dateCreated":"2020-08-20 06:40:23.891","dateStarted":"2020-08-21 23:07:47.913","dateFinished":"2020-08-21 23:07:59.961","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"3 - Print the partitions","text":"%pyspark\n\ndef printPartition(iter):\n  i=0\n  for row in iter:\n    i=i+1\n  print (str(i))\n\nsc.setJobGroup(\"Partition processing\",\"Print the partitions\")\nweblogs.foreachPartition(printPartition)","user":"anonymous","dateUpdated":"2020-08-20 09:05:22.551","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823892_-454574777","id":"20200726-004915_1466100923","dateCreated":"2020-08-20 06:40:23.892","dateStarted":"2020-08-21 23:08:00.062","dateFinished":"2020-08-21 23:08:09.094","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n# Tear Down\n---","user":"anonymous","dateUpdated":"2020-08-21 22:36:59.839","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1598074586143_-707261303","id":"20200821-223626_1713594154","dateCreated":"2020-08-21 22:36:26.143","dateStarted":"2020-08-21 23:08:09.190","dateFinished":"2020-08-21 23:08:09.192","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Delete the Livy session","text":"%sh\n\nsessionId=$(curl -s localhost:8998/sessions | jq '.sessions[0].id')\ncurl -s localhost:8998/sessions/$sessionId -X DELETE","user":"anonymous","dateUpdated":"2020-08-21 22:36:59.697","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/sh","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1598074578779_-1134064454","id":"20200821-223618_1797293512","dateCreated":"2020-08-21 22:36:18.779","dateStarted":"2020-08-21 23:08:09.293","dateFinished":"2020-08-21 23:08:09.607","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%md\n## References\n\n[mapPartitions](https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.mapPartitions)\n[foreachPartition](https://spark.apache.org/docs/latest/api/python/pyspark.html#pyspark.RDD.foreachPartition)","user":"anonymous","dateUpdated":"2020-08-20 09:05:35.771","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823892_298264325","id":"20200726-000653_1473409463","dateCreated":"2020-08-20 06:40:23.892","dateStarted":"2020-08-21 23:08:09.695","dateFinished":"2020-08-21 23:08:09.696","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"title":"Additional resources","text":"%md\nWe hope you've enjoyed this lab. Below are additional resources that you should find useful:\n\n1. [Cloudera Tutorials](http://cloudera.com/tutorials.html) are your natural next step where you can explore Spark in more depth.\n2. [Cloudera Community](https://community.cloudera.com) is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.\n3. [Apache Spark Documentation](https://spark.apache.org/documentation.html) - official Spark documentation.\n4. [Apache Zeppelin Project Home Page](https://zeppelin.apache.org) - official Zeppelin web site.","user":"anonymous","dateUpdated":"2020-08-20 09:05:35.981","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":10,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823892_305647367","id":"20181116-135131_93712280","dateCreated":"2020-08-20 06:40:23.892","dateStarted":"2020-08-21 23:08:09.797","dateFinished":"2020-08-21 23:08:09.798","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%angular\n</br>\n</br>\n</br>\n</br>\n<center>\n<a href=\"https://www.cloudera.com/about/training/courses.html\">\n  <img src=\"https://www.cloudera.com/content/dam/www/marketing/media-kit/logo-assets/cloudera_logo_darkorange.png\" alt=\"Cloudera University\" style=\"width:280px;height:40px;border:0;\" align=\"middle\">\n</a>\n</center>\n</br>\n</br>","user":"anonymous","dateUpdated":"2020-08-20 09:05:36.138","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":2,"editorMode":"ace/mode/undefined","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823893_-1383251917","id":"20200110-154537_1406191376","dateCreated":"2020-08-20 06:40:23.893","dateStarted":"2020-08-21 23:08:09.900","dateFinished":"2020-08-21 23:08:09.902","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500},{"text":"%angular\n","user":"anonymous","dateUpdated":"2020-08-20 09:05:36.296","config":{"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/undefined","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1597930823893_1299542905","id":"20200110-162013_302547143","dateCreated":"2020-08-20 06:40:23.893","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500}],"name":"Perf/Labs/Pyspark/PartitionProcessing","id":"2FFEU1A9R","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"angular:shared_process":[],"sh:shared_process":[],"livy:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false},"info":{}}
